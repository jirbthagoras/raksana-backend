// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package repositories

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const completePacket = `-- name: CompletePacket :exec
UPDATE packets
SET completed = true
WHERE id = $1
`

func (q *Queries) CompletePacket(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, completePacket, id)
	return err
}

const completeTask = `-- name: CompleteTask :one
UPDATE tasks
SET completed = true, updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND user_id = $2
  AND DATE(created_at) = CURRENT_DATE
RETURNING id, habit_id, user_id, packet_id, name, description, difficulty, completed, created_at, updated_at
`

type CompleteTaskParams struct {
	ID     int64
	UserID int64
}

func (q *Queries) CompleteTask(ctx context.Context, arg CompleteTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, completeTask, arg.ID, arg.UserID)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.HabitID,
		&i.UserID,
		&i.PacketID,
		&i.Name,
		&i.Description,
		&i.Difficulty,
		&i.Completed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const countPacketTasks = `-- name: CountPacketTasks :one
SELECT
  COUNT(*) FILTER (WHERE completed = true) AS completed_task,
  COUNT(*) as assigned_task
FROM tasks
WHERE packet_id = $1 AND user_id = $2
`

type CountPacketTasksParams struct {
	PacketID int64
	UserID   int64
}

type CountPacketTasksRow struct {
	CompletedTask int64
	AssignedTask  int64
}

func (q *Queries) CountPacketTasks(ctx context.Context, arg CountPacketTasksParams) (CountPacketTasksRow, error) {
	row := q.db.QueryRow(ctx, countPacketTasks, arg.PacketID, arg.UserID)
	var i CountPacketTasksRow
	err := row.Scan(&i.CompletedTask, &i.AssignedTask)
	return i, err
}

const countUserActivePackets = `-- name: CountUserActivePackets :one
SELECT COUNT(*) FROM packets 
WHERE user_id = $1 AND completed = false
`

func (q *Queries) CountUserActivePackets(ctx context.Context, userID int64) (int64, error) {
	row := q.db.QueryRow(ctx, countUserActivePackets, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countUserTask = `-- name: CountUserTask :one
SELECT 
  COUNT (*) as assigned_task,
  COUNT (*) FILTER (WHERE completed = true) as completed_task
FROM tasks
WHERE user_id = $1
`

type CountUserTaskRow struct {
	AssignedTask  int64
	CompletedTask int64
}

func (q *Queries) CountUserTask(ctx context.Context, userID int64) (CountUserTaskRow, error) {
	row := q.db.QueryRow(ctx, countUserTask, userID)
	var i CountUserTaskRow
	err := row.Scan(&i.AssignedTask, &i.CompletedTask)
	return i, err
}

const createHabit = `-- name: CreateHabit :one
INSERT INTO habits (packet_id, name, description, difficulty, locked, weight)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id
`

type CreateHabitParams struct {
	PacketID    int64
	Name        string
	Description string
	Difficulty  string
	Locked      bool
	Weight      int32
}

func (q *Queries) CreateHabit(ctx context.Context, arg CreateHabitParams) (int64, error) {
	row := q.db.QueryRow(ctx, createHabit,
		arg.PacketID,
		arg.Name,
		arg.Description,
		arg.Difficulty,
		arg.Locked,
		arg.Weight,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createLog = `-- name: CreateLog :one
INSERT INTO logs (user_id, text, is_system, is_private)
VALUES ($1, $2, $3, $4)
RETURNING id, text, is_system, is_private
`

type CreateLogParams struct {
	UserID    int64
	Text      string
	IsSystem  bool
	IsPrivate bool
}

type CreateLogRow struct {
	ID        int64
	Text      string
	IsSystem  bool
	IsPrivate bool
}

func (q *Queries) CreateLog(ctx context.Context, arg CreateLogParams) (CreateLogRow, error) {
	row := q.db.QueryRow(ctx, createLog,
		arg.UserID,
		arg.Text,
		arg.IsSystem,
		arg.IsPrivate,
	)
	var i CreateLogRow
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.IsSystem,
		&i.IsPrivate,
	)
	return i, err
}

const createPacket = `-- name: CreatePacket :one
INSERT INTO packets  (user_id, name, target, description, expected_task, task_per_day)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id
`

type CreatePacketParams struct {
	UserID       int64
	Name         string
	Target       string
	Description  string
	ExpectedTask int32
	TaskPerDay   int32
}

func (q *Queries) CreatePacket(ctx context.Context, arg CreatePacketParams) (int64, error) {
	row := q.db.QueryRow(ctx, createPacket,
		arg.UserID,
		arg.Name,
		arg.Target,
		arg.Description,
		arg.ExpectedTask,
		arg.TaskPerDay,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createProfile = `-- name: CreateProfile :exec
INSERT INTO profiles (user_id, exp_needed)
VALUES ($1, $2)
`

type CreateProfileParams struct {
	UserID    int64
	ExpNeeded int64
}

func (q *Queries) CreateProfile(ctx context.Context, arg CreateProfileParams) error {
	_, err := q.db.Exec(ctx, createProfile, arg.UserID, arg.ExpNeeded)
	return err
}

const createStatistics = `-- name: CreateStatistics :exec
INSERT INTO statistics (user_id)
VALUES ($1)
`

func (q *Queries) CreateStatistics(ctx context.Context, userID int64) error {
	_, err := q.db.Exec(ctx, createStatistics, userID)
	return err
}

const createTask = `-- name: CreateTask :one
INSERT INTO tasks(habit_id, user_id, packet_id, name, description, difficulty)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, habit_id, user_id, packet_id, name, description, difficulty, completed, created_at, updated_at
`

type CreateTaskParams struct {
	HabitID     int64
	UserID      int64
	PacketID    int64
	Name        string
	Description string
	Difficulty  string
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, createTask,
		arg.HabitID,
		arg.UserID,
		arg.PacketID,
		arg.Name,
		arg.Description,
		arg.Difficulty,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.HabitID,
		&i.UserID,
		&i.PacketID,
		&i.Name,
		&i.Description,
		&i.Difficulty,
		&i.Completed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, username, email, password)
VALUES ($1, $2, $3, $4)
RETURNING id, username, email
`

type CreateUserParams struct {
	Name     string
	Username string
	Email    string
	Password string
}

type CreateUserRow struct {
	ID       int64
	Username string
	Email    string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Name,
		arg.Username,
		arg.Email,
		arg.Password,
	)
	var i CreateUserRow
	err := row.Scan(&i.ID, &i.Username, &i.Email)
	return i, err
}

const getAllPackets = `-- name: GetAllPackets :many
SELECT id, user_id, name, target, description, completed_task, expected_task, task_per_day, completed, created_at FROM packets
WHERE user_id = $1
`

func (q *Queries) GetAllPackets(ctx context.Context, userID int64) ([]Packet, error) {
	rows, err := q.db.Query(ctx, getAllPackets, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Packet
	for rows.Next() {
		var i Packet
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Target,
			&i.Description,
			&i.CompletedTask,
			&i.ExpectedTask,
			&i.TaskPerDay,
			&i.Completed,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLogs = `-- name: GetLogs :many
SELECT text, created_at, is_system, is_private
FROM logs
WHERE user_id = $1 AND is_private = $2
ORDER BY created_at DESC
`

type GetLogsParams struct {
	UserID    int64
	IsPrivate bool
}

type GetLogsRow struct {
	Text      string
	CreatedAt pgtype.Timestamp
	IsSystem  bool
	IsPrivate bool
}

func (q *Queries) GetLogs(ctx context.Context, arg GetLogsParams) ([]GetLogsRow, error) {
	rows, err := q.db.Query(ctx, getLogs, arg.UserID, arg.IsPrivate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLogsRow
	for rows.Next() {
		var i GetLogsRow
		if err := rows.Scan(
			&i.Text,
			&i.CreatedAt,
			&i.IsSystem,
			&i.IsPrivate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPacketDetail = `-- name: GetPacketDetail :one
SELECT 
    p.id AS packet_id,
    p.user_id,
    u.name AS user_name,
    u.username,
    p.name AS packet_name,
    p.target,
    p.description,
    p.completed_task,
    p.expected_task,
    p.task_per_day,
    p.completed,
    p.created_at
FROM packets p
JOIN users u ON u.id = p.user_id
WHERE p.id = $1
`

type GetPacketDetailRow struct {
	PacketID      int64
	UserID        int64
	UserName      string
	Username      string
	PacketName    string
	Target        string
	Description   string
	CompletedTask int32
	ExpectedTask  int32
	TaskPerDay    int32
	Completed     bool
	CreatedAt     pgtype.Timestamp
}

func (q *Queries) GetPacketDetail(ctx context.Context, id int64) (GetPacketDetailRow, error) {
	row := q.db.QueryRow(ctx, getPacketDetail, id)
	var i GetPacketDetailRow
	err := row.Scan(
		&i.PacketID,
		&i.UserID,
		&i.UserName,
		&i.Username,
		&i.PacketName,
		&i.Target,
		&i.Description,
		&i.CompletedTask,
		&i.ExpectedTask,
		&i.TaskPerDay,
		&i.Completed,
		&i.CreatedAt,
	)
	return i, err
}

const getPacketHabits = `-- name: GetPacketHabits :many
SELECT 
  id, packet_id, name, description, difficulty, locked, weight
FROM habits
WHERE packet_id = $1
`

func (q *Queries) GetPacketHabits(ctx context.Context, packetID int64) ([]Habit, error) {
	rows, err := q.db.Query(ctx, getPacketHabits, packetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Habit
	for rows.Next() {
		var i Habit
		if err := rows.Scan(
			&i.ID,
			&i.PacketID,
			&i.Name,
			&i.Description,
			&i.Difficulty,
			&i.Locked,
			&i.Weight,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPacketUnlockedHabits = `-- name: GetPacketUnlockedHabits :many
SELECT id, packet_id, name, description, difficulty, locked, weight FROM habits
WHERE packet_id = $1 AND locked = false
`

func (q *Queries) GetPacketUnlockedHabits(ctx context.Context, packetID int64) ([]Habit, error) {
	rows, err := q.db.Query(ctx, getPacketUnlockedHabits, packetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Habit
	for rows.Next() {
		var i Habit
		if err := rows.Scan(
			&i.ID,
			&i.PacketID,
			&i.Name,
			&i.Description,
			&i.Difficulty,
			&i.Locked,
			&i.Weight,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTaskById = `-- name: GetTaskById :one
SELECT id, habit_id, user_id, packet_id, name, description, difficulty, completed, created_at, updated_at FROM tasks
WHERE id = $1
`

func (q *Queries) GetTaskById(ctx context.Context, id int64) (Task, error) {
	row := q.db.QueryRow(ctx, getTaskById, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.HabitID,
		&i.UserID,
		&i.PacketID,
		&i.Name,
		&i.Description,
		&i.Difficulty,
		&i.Completed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTodayTasks = `-- name: GetTodayTasks :many
SELECT id, habit_id, user_id, packet_id, name, description, difficulty, completed, created_at, updated_at
FROM tasks
WHERE user_id = $1
  AND DATE(created_at) = CURRENT_DATE
ORDER BY id
`

func (q *Queries) GetTodayTasks(ctx context.Context, userID int64) ([]Task, error) {
	rows, err := q.db.Query(ctx, getTodayTasks, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.HabitID,
			&i.UserID,
			&i.PacketID,
			&i.Name,
			&i.Description,
			&i.Difficulty,
			&i.Completed,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserActivePackets = `-- name: GetUserActivePackets :one
SELECT id, user_id, name, target, description, completed_task, expected_task, task_per_day, completed, created_at FROM packets
WHERE user_id = $1 AND completed = false
`

func (q *Queries) GetUserActivePackets(ctx context.Context, userID int64) (Packet, error) {
	row := q.db.QueryRow(ctx, getUserActivePackets, userID)
	var i Packet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Target,
		&i.Description,
		&i.CompletedTask,
		&i.ExpectedTask,
		&i.TaskPerDay,
		&i.Completed,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, password
FROM users
WHERE email = $1
`

type GetUserByEmailRow struct {
	ID       int64
	Username string
	Email    string
	Password string
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, username, email, password
FROM users
WHERE id = $1
`

type GetUserByIdRow struct {
	ID       int64
	Username string
	Email    string
	Password string
}

func (q *Queries) GetUserById(ctx context.Context, id int64) (GetUserByIdRow, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i GetUserByIdRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const getUserProfile = `-- name: GetUserProfile :one
SELECT current_exp, exp_needed, level, points
FROM profiles
WHERE user_id = $1 AND is_admin = false
`

type GetUserProfileRow struct {
	CurrentExp int64
	ExpNeeded  int64
	Level      int32
	Points     int64
}

func (q *Queries) GetUserProfile(ctx context.Context, userID int64) (GetUserProfileRow, error) {
	row := q.db.QueryRow(ctx, getUserProfile, userID)
	var i GetUserProfileRow
	err := row.Scan(
		&i.CurrentExp,
		&i.ExpNeeded,
		&i.Level,
		&i.Points,
	)
	return i, err
}

const getUserProfileStatistic = `-- name: GetUserProfileStatistic :one
SELECT 
    u.id AS user_id,
    u.name,
    u.username,
    u.email,
    p.current_exp,
    p.exp_needed,
    p.level,
    p.points,
    p.profile_url,
    s.challenges,
    s.events,
    s.quests,
    s.treasures,
    s.longest_streak,
    s.tree_grown
FROM users u
JOIN profiles p ON u.id = p.user_id
JOIN statistics s ON u.id = s.user_id
WHERE u.id = $1
`

type GetUserProfileStatisticRow struct {
	UserID        int64
	Name          string
	Username      string
	Email         string
	CurrentExp    int64
	ExpNeeded     int64
	Level         int32
	Points        int64
	ProfileUrl    string
	Challenges    int32
	Events        int32
	Quests        int32
	Treasures     int32
	LongestStreak int32
	TreeGrown     int32
}

func (q *Queries) GetUserProfileStatistic(ctx context.Context, id int64) (GetUserProfileStatisticRow, error) {
	row := q.db.QueryRow(ctx, getUserProfileStatistic, id)
	var i GetUserProfileStatisticRow
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.Username,
		&i.Email,
		&i.CurrentExp,
		&i.ExpNeeded,
		&i.Level,
		&i.Points,
		&i.ProfileUrl,
		&i.Challenges,
		&i.Events,
		&i.Quests,
		&i.Treasures,
		&i.LongestStreak,
		&i.TreeGrown,
	)
	return i, err
}

const getUserStatistic = `-- name: GetUserStatistic :one
SELECT id, user_id, challenges, events, quests, treasures, longest_streak, tree_grown FROM statistics WHERE user_id = $1
`

func (q *Queries) GetUserStatistic(ctx context.Context, userID int64) (Statistic, error) {
	row := q.db.QueryRow(ctx, getUserStatistic, userID)
	var i Statistic
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Challenges,
		&i.Events,
		&i.Quests,
		&i.Treasures,
		&i.LongestStreak,
		&i.TreeGrown,
	)
	return i, err
}

const increaseExp = `-- name: IncreaseExp :one
UPDATE profiles 
SET current_exp = current_exp + $1::int
WHERE user_id = $2::int
RETURNING current_exp, exp_needed, level
`

type IncreaseExpParams struct {
	ExpGain int32
	UserID  int32
}

type IncreaseExpRow struct {
	CurrentExp int64
	ExpNeeded  int64
	Level      int32
}

func (q *Queries) IncreaseExp(ctx context.Context, arg IncreaseExpParams) (IncreaseExpRow, error) {
	row := q.db.QueryRow(ctx, increaseExp, arg.ExpGain, arg.UserID)
	var i IncreaseExpRow
	err := row.Scan(&i.CurrentExp, &i.ExpNeeded, &i.Level)
	return i, err
}

const increasePacketCompletedTask = `-- name: IncreasePacketCompletedTask :exec
UPDATE packets
SET completed_task = completed_task + 1
WHERE id = $1
`

func (q *Queries) IncreasePacketCompletedTask(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, increasePacketCompletedTask, id)
	return err
}

const unlockHabit = `-- name: UnlockHabit :exec
UPDATE habits
SET locked = false
WHERE id = $1
`

func (q *Queries) UnlockHabit(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, unlockHabit, id)
	return err
}

const updateLevelAndExpNeeded = `-- name: UpdateLevelAndExpNeeded :one
UPDATE profiles                                  m
SET exp_needed = $1, level = level + 1
WHERE user_id = $2
RETURNING level
`

type UpdateLevelAndExpNeededParams struct {
	ExpNeeded int64
	UserID    int64
}

func (q *Queries) UpdateLevelAndExpNeeded(ctx context.Context, arg UpdateLevelAndExpNeededParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateLevelAndExpNeeded, arg.ExpNeeded, arg.UserID)
	var level int32
	err := row.Scan(&level)
	return level, err
}

const updateLongestStreak = `-- name: UpdateLongestStreak :exec
UPDATE statistics SET longest_streak = $1
WHERE user_id = $2
`

type UpdateLongestStreakParams struct {
	LongestStreak int32
	UserID        int64
}

func (q *Queries) UpdateLongestStreak(ctx context.Context, arg UpdateLongestStreakParams) error {
	_, err := q.db.Exec(ctx, updateLongestStreak, arg.LongestStreak, arg.UserID)
	return err
}
