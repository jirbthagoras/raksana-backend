// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package repositories

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createLog = `-- name: CreateLog :one
INSERT INTO logs (user_id, text, is_system, is_marked, is_private)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, text, is_system, is_marked, is_private
`

type CreateLogParams struct {
	UserID    int64
	Text      string
	IsSystem  bool
	IsMarked  bool
	IsPrivate bool
}

type CreateLogRow struct {
	ID        int64
	Text      string
	IsSystem  bool
	IsMarked  bool
	IsPrivate bool
}

func (q *Queries) CreateLog(ctx context.Context, arg CreateLogParams) (CreateLogRow, error) {
	row := q.db.QueryRow(ctx, createLog,
		arg.UserID,
		arg.Text,
		arg.IsSystem,
		arg.IsMarked,
		arg.IsPrivate,
	)
	var i CreateLogRow
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.IsSystem,
		&i.IsMarked,
		&i.IsPrivate,
	)
	return i, err
}

const createProfile = `-- name: CreateProfile :exec
INSERT INTO profiles (user_id, exp_needed)
VALUES ($1, $2)
`

type CreateProfileParams struct {
	UserID    int64
	ExpNeeded int64
}

func (q *Queries) CreateProfile(ctx context.Context, arg CreateProfileParams) error {
	_, err := q.db.Exec(ctx, createProfile, arg.UserID, arg.ExpNeeded)
	return err
}

const createStatistics = `-- name: CreateStatistics :exec
INSERT INTO statistics (user_id)
VALUES ($1)
`

func (q *Queries) CreateStatistics(ctx context.Context, userID int64) error {
	_, err := q.db.Exec(ctx, createStatistics, userID)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, username, email, password)
VALUES ($1, $2, $3, $4)
RETURNING id, username, email
`

type CreateUserParams struct {
	Name     string
	Username string
	Email    string
	Password string
}

type CreateUserRow struct {
	ID       int64
	Username string
	Email    string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Name,
		arg.Username,
		arg.Email,
		arg.Password,
	)
	var i CreateUserRow
	err := row.Scan(&i.ID, &i.Username, &i.Email)
	return i, err
}

const getLogs = `-- name: GetLogs :many
SELECT text, created_at, is_marked, is_system, is_private
FROM logs
WHERE user_id = $1 AND is_marked = $2 AND is_system = $3 AND is_private = $4
`

type GetLogsParams struct {
	UserID    int64
	IsMarked  bool
	IsSystem  bool
	IsPrivate bool
}

type GetLogsRow struct {
	Text      string
	CreatedAt pgtype.Timestamp
	IsMarked  bool
	IsSystem  bool
	IsPrivate bool
}

func (q *Queries) GetLogs(ctx context.Context, arg GetLogsParams) ([]GetLogsRow, error) {
	rows, err := q.db.Query(ctx, getLogs,
		arg.UserID,
		arg.IsMarked,
		arg.IsSystem,
		arg.IsPrivate,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLogsRow
	for rows.Next() {
		var i GetLogsRow
		if err := rows.Scan(
			&i.Text,
			&i.CreatedAt,
			&i.IsMarked,
			&i.IsSystem,
			&i.IsPrivate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProfileByUserId = `-- name: GetProfileByUserId :one
SELECT current_exp, exp_needed, level, points
FROM profiles
WHERE user_id = $1
`

type GetProfileByUserIdRow struct {
	CurrentExp int64
	ExpNeeded  int64
	Level      int32
	Points     int64
}

func (q *Queries) GetProfileByUserId(ctx context.Context, userID int64) (GetProfileByUserIdRow, error) {
	row := q.db.QueryRow(ctx, getProfileByUserId, userID)
	var i GetProfileByUserIdRow
	err := row.Scan(
		&i.CurrentExp,
		&i.ExpNeeded,
		&i.Level,
		&i.Points,
	)
	return i, err
}

const getStatisticByUserID = `-- name: GetStatisticByUserID :one
SELECT id, user_id, challenges, events, quests, treasures, longest_streak, tree_grown FROM statistics WHERE user_id = $1
`

func (q *Queries) GetStatisticByUserID(ctx context.Context, userID int64) (Statistic, error) {
	row := q.db.QueryRow(ctx, getStatisticByUserID, userID)
	var i Statistic
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Challenges,
		&i.Events,
		&i.Quests,
		&i.Treasures,
		&i.LongestStreak,
		&i.TreeGrown,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, password
FROM users
WHERE email = $1
`

type GetUserByEmailRow struct {
	ID       int64
	Username string
	Email    string
	Password string
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, username, email, password
FROM users
WHERE id = $1
`

type GetUserByIdRow struct {
	ID       int64
	Username string
	Email    string
	Password string
}

func (q *Queries) GetUserById(ctx context.Context, id int64) (GetUserByIdRow, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i GetUserByIdRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const increaseExp = `-- name: IncreaseExp :one
UPDATE profiles 
SET current_exp = current_exp + $1::int
WHERE user_id = $2::int
RETURNING current_exp, exp_needed, level
`

type IncreaseExpParams struct {
	ExpGain int32
	UserID  int32
}

type IncreaseExpRow struct {
	CurrentExp int64
	ExpNeeded  int64
	Level      int32
}

func (q *Queries) IncreaseExp(ctx context.Context, arg IncreaseExpParams) (IncreaseExpRow, error) {
	row := q.db.QueryRow(ctx, increaseExp, arg.ExpGain, arg.UserID)
	var i IncreaseExpRow
	err := row.Scan(&i.CurrentExp, &i.ExpNeeded, &i.Level)
	return i, err
}

const updateLevelAndExpNeeded = `-- name: UpdateLevelAndExpNeeded :one
UPDATE profiles
SET exp_needed = $1, level = level + 1
WHERE user_id = $2
RETURNING level
`

type UpdateLevelAndExpNeededParams struct {
	ExpNeeded int64
	UserID    int64
}

func (q *Queries) UpdateLevelAndExpNeeded(ctx context.Context, arg UpdateLevelAndExpNeededParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateLevelAndExpNeeded, arg.ExpNeeded, arg.UserID)
	var level int32
	err := row.Scan(&level)
	return level, err
}

const updateLongestStreak = `-- name: UpdateLongestStreak :exec
UPDATE statistics SET longest_streak = $1
WHERE user_id = $2
`

type UpdateLongestStreakParams struct {
	LongestStreak int32
	UserID        int64
}

func (q *Queries) UpdateLongestStreak(ctx context.Context, arg UpdateLongestStreakParams) error {
	_, err := q.db.Exec(ctx, updateLongestStreak, arg.LongestStreak, arg.UserID)
	return err
}
